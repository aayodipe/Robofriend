{"version":3,"sources":["component/Card.js","component/CardList.js","component/Searchbox.js","App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","src","CardList","robots","map","user","i","Searchbox","searchField","searchChance","type","placeholder","onChange","App","e","setState","target","value","state","fetch","then","response","json","users","this","filterRobots","filter","robot","toLowerCase","includes","length","class","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+SAGe,SAASA,EAAT,GAAiC,IAAlBC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MAAMC,EAAK,EAALA,GACtC,OACI,sBAAKC,UAAY,yCAAjB,UACI,qBAAKC,IAAG,oCAAgCF,EAAhC,cACR,sBAAKC,UAAW,UAAhB,UACK,oBAAIA,UAAY,UAAhB,SAA2BH,IAC3B,mBAAGG,UAAY,QAAf,SAAwBF,U,MCH1B,SAASI,EAAT,GAA6B,IAAVC,EAAS,EAATA,OAC9B,OACI,qBAAKH,UAAY,WAAjB,SAEOG,EAAOC,KAAI,SAACC,EAAMC,GACjB,OAAQ,cAAC,EAAD,CACJP,GAAMM,EAAKN,GACXF,KAAQQ,EAAKR,KACbC,MAAQO,EAAKP,OACNQ,Q,MCZZ,SAASC,EAAT,GAAgD,EAA5BC,YAA6B,IAAhBC,EAAe,EAAfA,aAE5C,OACI,qBAAKT,UAAY,MAAjB,SACI,uBAAOU,KAAO,SAASV,UAAU,uCAAuCW,YAAa,eAAeC,SAAYH,M,ICiD7GI,E,kDAhDf,aAAc,IAAD,8BACX,gBAMDJ,aAAe,SAAAK,GAEZ,EAAKC,SAAS,CAACP,YAAaM,EAAEE,OAAOC,SAPvC,EAAKC,MAAQ,CACXf,OAAQ,GACRK,YAAa,IAJJ,E,gEAYO,IAAD,OACjBW,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKR,SAAS,CAACZ,OAAOoB,S,+BAG9B,IAAD,EACwBC,KAAKN,MAA5Bf,EADD,EACCA,OAAQK,EADT,EACSA,YACTiB,EAAetB,EAAOuB,QAAO,SAAAC,GACjC,OACEA,EAAM9B,KAAK+B,cACVC,SAASrB,EAAYoB,kBAI5B,OAAQzB,EAAO2B,OASX,sBAAK9B,UAAU,KAAf,UACE,8CACE,cAAC,EAAD,CAAYS,aAAgBe,KAAKf,eACjC,cAAC,EAAD,CAAUN,OAASsB,OAVvB,qBAAKM,MAAM,uCAAX,SACI,sBAAKA,MAAM,mBAAX,UACI,wBACA,iC,GAjCMC,aCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.8cc5f50d.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Card.css'\r\n\r\nexport default function Card({name, email,id}) {\r\n    return (\r\n        <div className = 'tc bg-light-green dib br3 pa3 ma2 grow'>\r\n            <img src ={`https://robohash.org/test/${id}/200X200`}/>\r\n            <div className ='content'>                \r\n                 <h2 className = 'heading'>{name}</h2>\r\n                 <p className = 'email'>{email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport Card from './Card';\r\nimport './CardList.css';\r\n\r\n\r\n\r\nexport default function CardList({robots}) {\r\n    return (\r\n        <div className = 'cardlist'>\r\n           {\r\n               robots.map((user, i) => {          \r\n                return  <Card \r\n                    id = {user.id} \r\n                    name = {user.name} \r\n                    email ={user.email} \r\n                    key = {i}/>\r\n                })\r\n           }\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport './Searchbox.css'\r\n\r\nexport default function Searchbox({searchField, searchChance}) {\r\n    \r\n    return (\r\n        <div className = 'pa2'>\r\n            <input type = 'search' className='pa3 ba b--green bg-light-blue search' placeholder ='Search Robot' onChange = {searchChance}/>\r\n        </div>\r\n    )\r\n}\r\n","import { Component } from 'react';\nimport './App.css';\nimport CardList from './component/CardList';\nimport Searchbox from './component/Searchbox';\n\n\n\nclass App extends Component {\nconstructor(){\n  super();\n  this.state = {\n    robots: [],\n    searchField :''\n  }\n}\n searchChance = e => {\n  //  Set the value of the searchField to the event target value\n    this.setState({searchField: e.target.value})\n}\n\ncomponentDidMount(){\n  fetch('https://jsonplaceholder.typicode.com/users')\n  .then(response => response.json())\n  .then(users => this.setState({robots:users}))\n}\n\nrender(){\n  const {robots, searchField} = this.state;\n  const filterRobots = robots.filter(robot=>{\n    return (\n      robot.name.toLowerCase()\n      .includes(searchField.toLowerCase())\n    )\n  })\n// Display loading icon when robot is empty\nreturn !robots.length ?\n    (   \n    <div class=\"loadingio-spinner-ripple-lugqw9fpz88\">\n        <div class=\"ldio-tlm1xm1qwka\">\n            <div></div>\n            <div></div>\n        </div>\n    </div>\n    ):(\n    <div className=\"tc\">\n      <h1>RobotFriends</h1>\n        <Searchbox  searchChance = {this.searchChance}/>\n        <CardList robots= {filterRobots}/>\n    </div>\n  )\n \n \n}\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}